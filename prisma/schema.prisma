// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String?
  providerType       String?
  provider           String
  providerAccountId  String
  expires_at         Int?
  scope              String?
  token_type         String?
  id_token           String?
  refreshToken       String?
  access_token       String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  firstName     String?
  lastName      String?
  password      String?
  thumbnail     String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  anonymous     Boolean    @default(false)
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  Wishlist      Wishlist[]
  Comment       Comment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String?
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wishlist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  name      String
  views     String
  thumbnail String
  href      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  authorName String
  avatar     String
  user       User   @relation(fields: [userId], references: [id])
  mangaId    String
  content    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MEMBERSHIP
  USER
}
